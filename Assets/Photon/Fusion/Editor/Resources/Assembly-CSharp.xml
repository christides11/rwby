<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Assembly-CSharp</name>
    </assembly>
    <members>
        <member name="T:PlayerSpawnerPrototype">
            <summary>
            Prototyping component for spawning Player avatars.
            </summary>
        </member>
        <member name="F:SpawnerPrototype`1.StateAuthority">
            <summary>
            Available if AllowClientObjects is enabled in the NetworkProjectConfig, this allows players to be spawned with client StateAuthority.
            </summary>
        </member>
        <member name="T:ISpawnPointPrototype">
            <summary>
            Flag interface to identify GameObjects that should be used as markers for spawn points. 
            Used by <see cref="!:ISpawnPointManagerPrototype"/> to locate spawn points in a scene.
            </summary>
        </member>
        <member name="T:InputBehaviourPrototype">
            <summary>
            A simple example of Fusion input collection. This component should be on the same GameObject as the <see cref="T:Fusion.NetworkRunner"/>.
            </summary>
        </member>
        <member name="T:NetworkInputPrototype">
            <summary>
            Example definition of an INetworkStruct.
            </summary>
        </member>
        <member name="T:SpawnPointManagerPrototype`1">
            <summary>
            Derive from this class for different <see cref="T:ISpawnPointPrototype"/> types. 
            Derived manager will only find that spawn point type, allowing for separate handling of player spawn points from other spawn-able items such as AI.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:SpawnPointManagerPrototype`1.Sequence">
            <summary>
            How spawn points will be selected from the <see cref="F:SpawnPointManagerPrototype`1._spawnPoints"/> collection.
            </summary>
        </member>
        <member name="F:SpawnPointManagerPrototype`1.BlockingLayers">
            <summary>
            LayerMask for which physics layers should be used for blocked spawn point checks.
            </summary>
        </member>
        <member name="F:SpawnPointManagerPrototype`1.BlockedCheckRadius">
            <summary>
            The search radius used for detecting if a spawn point is blocked by an object.
            </summary>
        </member>
        <member name="F:SpawnPointManagerPrototype`1._spawnPoints">
            <summary>
            Serialized collection of all <see cref="T:ISpawnPointPrototype"/> of the type T found in the same scene as this component.
            </summary>
        </member>
        <member name="M:SpawnPointManagerPrototype`1.CollectSpawnPoints(Fusion.NetworkRunner)">
            <summary>
            Find all <see cref="T:ISpawnPointPrototype"/> instances in the same scene as this spawner. 
            This should only be done at development time if using the Photon relay for any spawn logic.
            </summary>
        </member>
        <member name="M:SpawnPointManagerPrototype`1.GetNextSpawnPoint(Fusion.NetworkRunner,Fusion.PlayerRef,System.Boolean)">
            <summary>
            Select the next spawn point using the defined <see cref="F:SpawnPointManagerPrototype`1.Sequence"/>. Override this method to expand on this, such as detecting if a spawn point is blocked.
            </summary>
        </member>
        <member name="M:SpawnPointManagerPrototype`1.AllSpawnPointsBlockedFallback">
            <summary>
            Handling for if all spawn points are blocked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpawnPointManagerPrototype`1.GetNextUnblocked(System.Int32)">
            <summary>
            Cycles through all remaining spawn points searching for unblocked. Will return null if all points return <see cref="!:IsBlocked(Transform)"/> == true.
            </summary>
            <param name="failedIndex">The index of the first tried SpawnPoints[] element, which was blocked.</param>
            <returns>(<see cref="F:SpawnPointManagerPrototype`1._spawnPoints"/> index, <see cref="T:ISpawnPointPrototype"/>)</returns>
        </member>
        <member name="M:SpawnPointManagerPrototype`1.IsBlocked(UnityEngine.Component)">
            <summary>
            Override this method with any logic for checking if a spawn point is blocked.
            </summary>
            <param name="spawnPoint"></param>
            <returns></returns>
        </member>
        <member name="T:ISpawnPointManagerPrototype`1">
            <summary>
            Interface for <see cref="T:SpawnPointManagerPrototype`1"/> behaviours.
            </summary>
        </member>
        <member name="T:PlayerSpawnPointPrototype">
            <summary>
            Flag component to identify GameObjects that should be used as markers for spawn points.
            </summary>
        </member>
        <member name="T:PlayerAOIPrototype">
            <summary>
            Prototyping component for Fusion. Updates the Player's AOI every tick to be a radius around this object.
            </summary>
        </member>
        <member name="F:PlayerAOIPrototype.Radius">
            <summary>
            Radius around this GameObject that defines the Area Of Interest for the InputAuthority of the object.
            The InputAuthority player of this <see cref="T:Fusion.NetworkObject"/>, 
            will receive updates for any other <see cref="T:Fusion.NetworkObject"/> within this radius. 
            </summary>
        </member>
        <member name="T:FusionStats">
            <summary>
            Creates and controls a Canvas with one or multiple telemetry graphs. Can be created as a scene object or prefab,
            or be created at runtime using the <see cref="M:FusionStats.Create(Fusion.NetworkRunner,System.Nullable{UnityEngine.Rect},System.Nullable{Fusion.Simulation.Statistics.FusionStatFlags})"/> methods.
            </summary>
        </member>
        <member name="M:FusionStats.Create(Fusion.NetworkRunner,System.Nullable{UnityEngine.Rect},System.Nullable{Fusion.Simulation.Statistics.FusionStatFlags})">
            <summary>
            Creates a new GameObject with a <see cref="T:FusionStats"/> component.
            To generate the UI when not playing, call <see cref="M:FusionStats.Initialize"/> on the returned <see cref="T:FusionStats"/> component.
            Initialize automatically runs on Awake().
            </summary>
            <param name="runner"></param>
            <param name="normalizedRect">If not null, uses the supplied Rect as the initial position.</param>
            <param name="statsMask">The stats to be enabled. If left null, default statistics will be used.</param>
        </member>
        <member name="M:FusionStats.Create(Fusion.NetworkRunner,FusionStats.DefaultLayouts,System.Nullable{Fusion.Simulation.Statistics.FusionStatFlags})">
            <summary>
            Creates a new GameObject with a <see cref="T:FusionStats"/> component.
            To generate the UI when not playing, call <see cref="M:FusionStats.Initialize"/> on the returned <see cref="T:FusionStats"/> component.
            Initialize automatically runs on Awake().
            </summary>
            <param name="runner"></param>
            <param name="layout">Uses a predefined position.</param>
            <param name="statsMask">The stats to be enabled. If left null, default statistics will be used.</param>
            <returns></returns>
        </member>
        <member name="P:FusionStats.DefaultMask">
            <summary>
            Defines the stat types that should only be shown if explicitly asked for.
            </summary>
        </member>
        <member name="F:FusionStats.RedrawInterval">
            <summary>
            Interval (in seconds) between Graph redraws. Lower values reduce CPU overhead, draw calls and garbage collection. 
            </summary>
        </member>
        <member name="F:FusionStats._buttonHeight">
            <summary>
            Height of button region at top of the stats panel. Values less than or equal to 0 hide the buttons, and reduce the header size.
            </summary>
        </member>
        <member name="F:FusionStats._position">
            <summary>
            The Rect that defines the position of the entire states overlay on the player. Sizes are normalized percentages.(ranges of 0f-1f).
            </summary>
        </member>
        <member name="F:FusionStats.InitializeAllGraphs">
            <summary>
            Initializes a <see cref="T:FusionGraph"/> for all available stats, even if not initially included. 
            If disabled, graphs added after initialization will be added to the bottom of the interface stack.
            </summary>
        </member>
        <member name="F:FusionStats.ConnectTo">
            <summary>
            When <see cref="F:FusionStats._activeRunner"/> is null, will continuously attempt to find and connect to an active <see cref="T:Fusion.NetworkRunner"/> which matches these indicated modes.
            </summary>
        </member>
        <member name="F:FusionStats._includedStats">
            <summary>
            Selects which stats should be displayed.
            </summary>
        </member>
        <member name="F:FusionStats.EnforceSingle">
            <summary>
            Only one instance with the <see cref="F:FusionStats.Guid"/> can exist. Will destroy any clones on Awake.
            </summary>
        </member>
        <member name="F:FusionStats.Guid">
            <summary>
            Identifier used to enforce single instances. Only one instance at a given time.
            </summary>
        </member>
        <member name="F:FusionStats.GraphColor">
            <summary>
            The color used for the telemetry graph data.
            </summary>
        </member>
        <member name="T:NetworkDebugStartGUI">
            <summary>
            Companion component for <see cref="T:NetworkDebugStart"/>. Automatically added as needed for rendering in-game networking IMGUI.
            </summary>
        </member>
        <member name="F:NetworkDebugStartGUI.EnableHotkeys">
            <summary>
            When enabled, the in-game user interface buttons can be activated with the keys H (Host), S (Server) and C (Client).
            </summary>
        </member>
        <member name="F:NetworkDebugStartGUI.BaseSkin">
            <summary>
            The GUISkin to use as the base for the scalable in-game UI.
            </summary>
        </member>
        <member name="T:NetworkDebugStart">
            <summary>
            A Fusion prototyping class for starting up basic networking. Add this component to your startup scene, and supply a <see cref="F:NetworkDebugStart.RunnerPrefab"/>.
            Can be set to automatically startup the network, display an in-game menu, or allow simplified start calls like <see cref="M:NetworkDebugStart.StartHost"/>.
            </summary>
        </member>
        <member name="T:NetworkDebugStart.StartModes">
            <summary>
            Selection for how <see cref="T:NetworkDebugStart"/> will behave at startup.
            </summary>
        </member>
        <member name="T:NetworkDebugStart.Stage">
            <summary>
            The current stage of connection or shutdown.
            </summary>
        </member>
        <member name="F:NetworkDebugStart.RunnerPrefab">
            <summary>
            Supply a Prefab or a scene object which has the <see cref="T:Fusion.NetworkRunner"/> component on it, 
            as well as any runner dependent components which implement <see cref="T:Fusion.INetworkRunnerCallbacks"/>, 
            such as <see cref="T:Fusion.NetworkEvents"/> or your own custom INetworkInput implementations.
            </summary>
        </member>
        <member name="F:NetworkDebugStart.StartMode">
            <summary>
            Select how network startup will be triggered. Automatically, by in-game menu selection, or exclusively by script.
            </summary>
        </member>
        <member name="F:NetworkDebugStart.AutoStartAs">
            <summary>
            When <see cref="F:NetworkDebugStart.StartMode"/> is set to <see cref="F:NetworkDebugStart.StartModes.Automatic"/>, this option selects if the <see cref="T:Fusion.NetworkRunner"/> 
            will be started as a dedicated server, or as a host (which is a server with a local player).
            </summary>
        </member>
        <member name="F:NetworkDebugStart.AutoHideGUI">
            <summary>
            <see cref="T:NetworkDebugStartGUI"/> will not render GUI elements while <see cref="P:NetworkDebugStart.CurrentStage"/> == <see cref="F:NetworkDebugStart.Stage.AllConnected"/>.
            </summary>
        </member>
        <member name="F:NetworkDebugStart.AutoClients">
            <summary>
            The number of client <see cref="T:Fusion.NetworkRunner"/> instances that will be created if running in Mulit-Peer Mode. 
            When using the Select start mode, this number will be the default value for the additional clients option box.
            </summary>
        </member>
        <member name="F:NetworkDebugStart.ServerPort">
            <summary>
            The port that server/host <see cref="T:Fusion.NetworkRunner"/> will use.
            </summary>
        </member>
        <member name="F:NetworkDebugStart.DefaultRoomName">
            <summary>
            The default room name to use when connecting to photon cloud.
            </summary>
        </member>
        <member name="F:NetworkDebugStart.AlwaysShowStats">
            <summary>
            Will automatically enable <see cref="T:FusionStats"/> once peers have finished connecting.
            </summary>
        </member>
        <member name="F:NetworkDebugStart.includedStats">
            <summary>
            Selects which telemetry statistics will be enabled in the <see cref="T:FusionStats"/> overlay.
            </summary>
        </member>
        <member name="F:NetworkDebugStart.InitialScenePath">
            <summary>
            The Scene that will be loaded after network shutdown completes (all peers have disconnected). 
            If this field is null or invalid, will be set to the current scene when <see cref="T:NetworkDebugStart"/> runs Awake().
            </summary>
        </member>
        <member name="P:NetworkDebugStart.CurrentStage">
            <summary>
            Indicates which step of the startup process <see cref="T:NetworkDebugStart"/> is currently in.
            </summary>
        </member>
        <member name="M:NetworkDebugStart.StartSinglePlayer">
            <summary>
            Start a single player instance.
            </summary>
        </member>
        <member name="M:NetworkDebugStart.StartServer">
            <summary>
            Start a server instance.
            </summary>
        </member>
        <member name="M:NetworkDebugStart.StartHost">
            <summary>
            Start a host instance. This is a server instance, with a local player.
            </summary>
        </member>
        <member name="M:NetworkDebugStart.StartClient">
            <summary>
            Start a client instance.
            </summary>
        </member>
        <member name="M:NetworkDebugStart.StartServerPlusClients">
            <summary>
            Start a Fusion server instance, and the number of client instances indicated by <see cref="F:NetworkDebugStart.AutoClients"/>. 
            InstanceMode must be set to Multi-Peer mode, as this requires multiple <see cref="T:Fusion.NetworkRunner"/> instances.
            </summary>
        </member>
        <member name="M:NetworkDebugStart.StartHostPlusClients">
            <summary>
            Start a Fusion host instance, and the number of client instances indicated by <see cref="F:NetworkDebugStart.AutoClients"/>. 
            InstanceMode must be set to Multi-Peer mode, as this requires multiple <see cref="T:Fusion.NetworkRunner"/> instances.
            </summary>
        </member>
        <member name="M:NetworkDebugStart.StartServerPlusClients(System.Int32)">
            <summary>
            Start a Fusion server instance, and the indicated number of client instances. 
            InstanceMode must be set to Multi-Peer mode, as this requires multiple <see cref="T:Fusion.NetworkRunner"/> instances.
            </summary>
        </member>
        <member name="M:NetworkDebugStart.StartHostPlusClients(System.Int32)">
            <summary>
            Start a Fusion host instance (server with local player), and the indicated number of additional client instances. 
            InstanceMode must be set to Multi-Peer mode, as this requires multiple <see cref="T:Fusion.NetworkRunner"/> instances.
            </summary>
        </member>
        <member name="M:NetworkDebugStart.StartMultipleClients(System.Int32)">
            <summary>
            Start a Fusion host instance (server with local player), and the indicated number of additional client instances. 
            InstanceMode must be set to Multi-Peer mode, as this requires multiple <see cref="T:Fusion.NetworkRunner"/> instances.
            </summary>
        </member>
        <member name="M:NetworkDebugStart.StartMultipleSharedClients(System.Int32)">
            <summary>
            Start as Room on the Photon cloud, and connects as one or more clients.
            </summary>
            <param name="clientCount"></param>
        </member>
        <member name="T:FusionScalableIMGUI">
            <summary>
            In-Game IMGUI style used for the <see cref="T:NetworkDebugStartGUI"/> interface.
            </summary>
        </member>
        <member name="M:FusionScalableIMGUI.GetScaledSkin(UnityEngine.GUISkin,System.Single@,System.Single@,System.Int32@,System.Int32@,System.Single@)">
            <summary>
            Get the custom scalable skin, already resized to the current screen. Provides the height, width, padding and margin used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FusionScalableIMGUI.ScaleGuiSkinToScreenHeight">
            <summary>
            Modifies a skin to make it scale with screen height.
            </summary>
            <param name="skin"></param>
            <returns>Returns (height, width, padding, top-margin, left-box-margin) values applied to the GuiSkin</returns>
        </member>
        <member name="F:ControllerPrototype.Speed">
            <summary>
            If object is not using <see cref="T:Fusion.NetworkCharacterController"/>, this controls how much change is applied to the transform/rigidbody.
            </summary>
        </member>
        <member name="M:FusionGraph.Refresh">
            <summary>
            Returns true if the graph rendered. False if the size was too small and the graph was hidden.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
